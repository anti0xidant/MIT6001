{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red55\green55\blue55;\red255\green255\blue255;\red26\green26\blue26;
\red246\green246\blue246;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl504\sa360\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Problem 4 - Part 1\
\pard\pardeftab720\sl448\sa453\partightenfactor0

\fs32 \cf4 \strokec4 Write a function called 
\f1\fs28 \cb5 getSublists
\f0\fs32 \cb3 , which takes as parameters a list of integers named 
\f1\fs28 \cb5 L
\f0\fs32 \cb3  and an integer named 
\f1\fs28 \cb5 n
\f0\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl448\sa226\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 assume 
\f1\fs28 \cb5 L
\f0\fs32 \cb3  is not empty\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl448\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 assume 
\f1\fs28 \cb5 0 < n <= len(L)
\f0\fs32 \cb1 \
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \cb3 This function returns a list of all possible sublists in 
\f1\fs28 \cb5 L
\f0\fs32 \cb3  of length 
\f1\fs28 \cb5 n
\f0\fs32 \cb3  without skipping elements in 
\f1\fs28 \cb5 L
\f0\fs32 \cb3 . The sublists in the returned list should be ordered in the way they appear in 
\f1\fs28 \cb5 L
\f0\fs32 \cb3 , with those sublists starting from a smaller index being at the front of the list.\cb1 \
\cb3 Example 1, if 
\f1\fs28 \cb5 L = [10, 4, 6, 8, 3, 4, 5, 7, 7, 2]
\f0\fs32 \cb3  and 
\f1\fs28 \cb5 n = 4
\f0\fs32 \cb3  then your function should return the list
\f1\fs28 \cb5 [[10, 4, 6, 8], [4, 6, 8, 3], [6, 8, 3, 4], [8, 3, 4, 5], [3, 4, 5, 7], [4, 5, 7, 7], [5, 7, 7, 2]]
\f0\fs32 \cb1 \
\cb3 Example 2, if 
\f1\fs28 \cb5 L = [1, 1, 1, 1, 4]
\f0\fs32 \cb3  and 
\f1\fs28 \cb5 n = 2
\f0\fs32 \cb3  then your function should return the list
\f1\fs28 \cb5 [[1, 1], [1, 1], [1, 1], [1, 4]]
\f0\fs32 \cb1 \
\pard\pardeftab720\sl448\partightenfactor0
\cf4 \
\pard\pardeftab720\sl448\sa453\partightenfactor0
\cf4 \cb3 Your function does not have to be recursive. Do not leave any debugging print statements when you paste your code in the box.\cb1 \
}